*****************************
* SENSAPP RRD STORAGE SERVICE
*****************************

1) RRD database templates
*************************
RRD database templates are reusable database schemas which can be instantiated as many times as needed to
store the data from similar sensors.

http://127.0.0.1:8080/rrd/templates
-----------------------------------
GET:    List the URLs of the templates (application/text).
POST:   Add a new template. (application/json)

Example RRDTemplate in JSON format:

{"key": "my_template",
"value": "<rrd_def><path>${PATH}</path><step>60</step><datasource><name>humidity</name><type>GAUGE</type>
<heartbeat>600</heartbeat><min>0</min><max>100</max></datasource><archive><cf>AVERAGE</cf><xff>0.5</xff>
<steps>2</steps><rows>1440</rows></archive><archive><cf>AVERAGE</cf><xff>0.5</xff><steps>15</steps>
<rows>2924</rows></archive><archive><cf>AVERAGE</cf><xff>0.5</xff><steps>120</steps><rows>4383</rows>
</archive></rrd_def>"}

Documentation for the XML format can be found here:
http://rrd4j.googlecode.com/svn/trunk/javadoc/reference/org/rrd4j/core/RrdDefTemplate.html

By default SensApp adds the templates contained in "src/main/resources/rrd_templates" in the repository.

http://127.0.0.1:8080/rrd/templates/my_template
-----------------------------------------------
GET:    Retrieve the XML template (application/xml)
PUT:    Update an existing template (application/json) - format similar to POST on http://127.0.0.1:8080/rrd/templates
DELETE: Delete a template

2) RRD databases management
***************************
RRD databases can be created from a template (schema) or by importing an existing RRD database as XML.
The actual data is stored in a collection of the Sensapp MongoDB database.

http://127.0.0.1:8080/rrd/databases
-----------------------------------
GET:    List the URLs of the databases (application/text).
POST:   Create a new RRD database either from an existing one or from a template (application/json)

JSON example to create a database from a template:
{"path": "my_database", "template_url": "http://127.0.0.1:8080/rrd/templates/my_template"}

JSON example to create a database by importing an existing one (outdoor temperature and humidity sensor in Oslo):
{"path": "kringsja", "data_url": "http://oslo.fleurey.com/data/kringsja.xml"}

The data format for importing RRD databases is the XML export format of the RRDTools format.

http://127.0.0.1:8080/rrd/databases/kringsja
--------------------------------------------
GET:    Get information about the database (application/text).
DELETE: Delete the database (all the data is lost)

http://127.0.0.1:8080/rrd/databases/kringsja/template
-----------------------------------------------------
GET: Retrive the template of this database (application/xml)

http://127.0.0.1:8080/rrd/databases/kringsja/xml
------------------------------------------------
GET: Export the database as XML - WARNING: Currently very very slow

3) Getting data and graphs from an RRD database
***********************************************

http://127.0.0.1:8080/rrd/databases/kringsja/data
-------------------------------------------------
GET: Retrieve data from the database (application/text)
    All parameters have a default value, so they are all optional
    * start       [now]       : Start time (using the RRD time DSL)
    * end         [now]       : End time (using the RRD time DSL)
    * resolution  [3600]      : RRD Resolution (leave default)
    * function    [AVERAGE]   : RRD consolidation function
POST: Similar requests can be posted using a JSON object

Documentation of the RRD time DSL can be found here: http://linux.die.net/man/1/rrdfetch

Example requests:
* Temperature and humidity on Brice birthday (25-02-2012):
http://127.0.0.1:8080/rrd/databases/kringsja/data?start=20120224&end=20120225
* Temperature and humidity last week:
http://127.0.0.1:8080/rrd/databases/kringsja/data?start=now-1week
* Hourly max temperature and humidity from yesterday:
http://127.0.0.1:8080/rrd/databases/kringsja/data?start=yesterday&end=now&function=MAX

Example JSON object which can be posted:
{"function" : "AVERAGE", "start" : "now-2week", "end" : "now-1week", "resolution" : "3600"}

http://127.0.0.1:8080/rrd/databases/kringsja/graph
-------------------------------------------------
GET:    Retrieve data from the database (image/jpeg)
    * data       MANDATORY    : The name of the datasource to plot
    * start       [now]       : Start time (using the RRD time DSL)
    * end         [now]       : End time (using the RRD time DSL)
    * resolution  [3600]      : RRD Resolution (leave default)
    * function    [AVERAGE]   : RRD consolidation function

This is the same interface as the data retrieval except for the "data" parameter which is mandatory and specifies
which data source should be plotted.

Example requests:
* Temperature for last year:
http://127.0.0.1:8080/rrd/databases/kringsja/graph?start=now-1year&end=now&data=temperature
* Humidity yesterday:
http://127.0.0.1:8080/rrd/databases/kringsja/graph?start=yesterday&end=now&data=humidity
* Temperature in february 2012
http://127.0.0.1:8080/rrd/databases/kringsja/graph?start=20120201&end=20120229&data=temperature

4) Pushing data in the database
*******************************

Work in progress.

5) Creating custom graphs
*************************

Work in progress.